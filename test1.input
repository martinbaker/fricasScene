--)library LOOP
--)library FGRPH
--)library FGRPH-
--)library DGRPH
GS := DirectedGraph(String)
hs := directedGraph(["a","b"])$GS
addObject!(hs,"c")$GS
addArrow!(hs,"alpha",1,2)
addArrow!(hs,"alpha",2,3)

isDirectSuccessor?(hs,1::NNI,2::NNI)
isDirectSuccessor?(hs,2::NNI,1::NNI)

-- now create graph suitable for diagram
OBJT ==> Record(value:String,posX:NNI,posY:NNI)
oba:OBJT := ["a",10,10]
obb:OBJT := ["b",10,60]
obc:OBJT := ["c",60,10]
hs2 := directedGraph([oba,obb,obc])$GS
addArrow!(hs2,"alpha",1,2)$GS
addArrow!(hs2,"beta",2,3)$GS
diagramSvg("testGraph1s1.svg",hs2,true)
T := terminal("a")$GS
I := initial()$GS

hs3 := directedGraph(["x","y"])$GS
addArrow!(hs3,"beta",1,2)

hs4 := hs*hs3

hs5 := cartesian(hs2,hs3)
diagramSvg("testGraph1s2.svg",hs5,true)

incidenceMatrix(hs5)
adjacencyMatrix(hs5)
laplacianMatrix(hs5)
distanceMatrix(hs5)