FG := FunctionGraph(String)

OBJT ==> Record(value:String,posX:NNI,posY:NNI)
oba:OBJT := ["a",2,2]
obb:OBJT := ["b",2,4]
ara:ARRW := ["alpha",0,1,2,0,0]
arb:ARRW := ["beta",0,2,1,0,0]
fs1 := functionGraph([oba,obb],[ara,arb])$FG

hs1 := cycleClosed(["a","b","c"],"a")$FG
hs2 := cycleOpen(["1","2","3"],"b")$FG
hs3 := closedTensor(hs1,hs2,concat)$FG
diagramSvg("testGraph7s1.svg",hs3,true)

a := apply(hs3,1::NNI)
a := apply(hs3,a)
a := apply(hs3,a)

limit(hs3,1::NNI)

hs4 := map(hs3,[1::NNI,1::NNI,1::NNI,_
                2::NNI,2::NNI,2::NNI,_
                3::NNI,3::NNI,3::NNI],["x","y","z"],0,0)
diagramSvg("testGraph7s2.svg",hs4,true)

coAdjoint(hs3,[1::NNI,1::NNI,1::NNI,_
                2::NNI,2::NNI,2::NNI,_
                3::NNI,3::NNI,3::NNI])

contraAdjoint(hs3,[1::NNI,1::NNI,1::NNI,_
                2::NNI,2::NNI,2::NNI,_
                3::NNI,3::NNI,3::NNI])

UG := UndirectedGraph(String)
us1 := cycleClosed(["a","b","c"],"a")$UG
distanceMatrix(us1)

MG := MultifunctionGraph(String)
MFOBJT ==> Record(value:String,posX:NNI,posY:NNI,next:List NNI)
moba:MFOBJT := ["a",2,2,[2,3]]
mobb:MFOBJT := ["b",2,4,[3,1]]
mobc:MFOBJT := ["b",4,4,[1,2]]
mf1 := multifunctionGraph([moba,mobb,mobc])$MG

b := apply(mf1,1::NNI,1::NNI)
b := apply(mf1,b,1::NNI)
b := apply(mf1,b,1::NNI)
c := apply(mf1,1::NNI,2::NNI)
c := apply(mf1,c,2::NNI)
c := apply(mf1,c,2::NNI)

WG := WeightedGraph(String,NNI)
WOBJT ==> Record(value:String,posX:NNI,posY:NNI,weight:NNI)
oba:WOBJT := ["a",10,30,1::NNI]
obb:WOBJT := ["b",30,10,2::NNI]
obc:WOBJT := ["c",30,30,3::NNI]
obd:WOBJT := ["d",30,50,4::NNI]
obe:WOBJT := ["e",50,30,5::NNI]
hs4 := weightedGraph([oba,obb,obc,obd,obe])$WG
addWArrow!(hs4,"a1",1,2,1)$WG
addWArrow!(hs4,"a2",1,3,4)$WG
addWArrow!(hs4,"a3",1,4,9)$WG
addWArrow!(hs4,"b1",2,5,9)$WG
addWArrow!(hs4,"b2",3,5,4)$WG
addWArrow!(hs4,"b3",4,5,1)$WG
diagramSvg("testGraph7s3.svg",hs4,true)

routeNodes(hs4,1::NNI,6::NNI)$WG
routeArrows(hs4,1::NNI,6::NNI)$WG

weightedDistanceMatrix(hs4)
